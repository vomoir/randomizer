<?xml version="1.0" encoding="utf-8"?>
<html>
<head>
<meta name="viewport" content="width=1200" />
<title>Fathom.js - Portable Test</title>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>RNDMZR</title>
<style>
			@media print{
				.group{height:100%;}
			}
			.group{
				margin:1em;
				padding:1em;
			}
			#group_list{
				display:none;
			}
		</style>
<link rel="stylesheet" href="css/themes/default/jquery.mobile-1.3.0.css" />
<link rel="stylesheet" href="http://fonts.googleapis.com/css?family=Open+Sans:300,400,700" />
<script src="js/jquery.js"></script>
<script src="js/jquery.mobile-1.3.0.js"></script>
</head>
<body>
<div id="ID_1852360558" data-role="page" class="ui-responsive-panel">
<div data-role="header" data-theme="f">Stage 6 SDD<a href="#nav-panel" data-icon="bars" data-iconpos="notext">Menu</a>
<a href="#add-form" data-icon="plus" data-iconpos="notext">Add</a>
</div><div data-role="panel" data-position="left" data-position-fixed="true" data-display="reveal" id="nav-panel" data-theme="a">
<ul data-role="listview" data-theme="a" data-divider-theme="a" style="margin-top:-16px;" class="nav-search">
<li data-icon="delete" style="background-color:#111;">
<a href="#" data-rel="close">Close menu</a>
</li>
<li><a href="#ID_1779775317">Topic 1</a></li>
<li><a href="#ID_3380458500">Assessment task 1</a></li>
<li><a href="#ID_1754744767">Example Questions</a></li>
<li><a href="#ID_4517437513">Metalanguages</a></li>
<li><a href="#ID_1892343683">Objectives - Students will develop...</a></li>
<li><a href="#ID_451944322">Content</a></li>
</ul>
</div>
</div>
<div id="ID_1779775317" data-role="page">
<div data-role="content">Topic 1</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_190063778" data-role="page">
<div data-role="content">Your first javascript program: "Hello World"</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_547455302" data-role="page">
<div data-role="content">Formative task 1: Create a form </div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_2488800570" data-role="page">
<div data-role="content">Student Management System</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_3880363511" data-role="page">
<div data-role="content">Text boxes, labels, drop down lists, submit and cancel buttons. No code, just form.</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1151442235" data-role="page">
<div data-role="content">End User Task</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_335111446" data-role="page">
<div data-role="content">Solve the following problem with an END USER APPROACH ... by creating a spreadsheet. You (the end user) require a simple program that will calculate the areas of rectangles, triangles and circles. The inputs will be the required dimensions and the output will be the area of the figure. Using Microsoft EXCEL create a one page application which solves this problem. You should make full use of the formatting, protection and draw features available in order to make the program as user friendly as possible.</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1008456016" data-role="page">
<div data-role="content">Trapezoid Problem</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_273749072" data-role="page">
<div data-role="content">Trapezoid Area 
1 Define the problem 
Write a program that will calculate the area of a trapezoid. After each of the measurements is entered the area is to be calculated. Provide a quality graphic of a labeled trapezoid as a part of the interface. 

2 Plan the solution 
A simple sketched storyboard showing what objects are required and what they are supposed to do. 

3 Implement the solution 
Create the interface
Write the code and add comments 
Save the solution
Test the application

4 Look back 
Check that the program has the outcomes that were specified at step 1. Is it perfectly clear how to operate this program? Is some help required on the use of the text boxes? Is there a need for improved input data validation? 
</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_7015832177" data-role="page">
<div data-role="content">Compilation vs Interpretation</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_2611666214" data-role="page">
<div data-role="content">List 5 compiled languages</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_4040722116" data-role="page">
<div data-role="content">List 5 interpreted languages</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_3431851551" data-role="page">
<div data-role="content">Approaches to Software Development</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_8687037704" data-role="page">
<div data-role="content">RAD</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_4644423375" data-role="page">
<div data-role="content">Agile</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_4347461530" data-role="page">
<div data-role="content">Structured</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_7663244078" data-role="page">
<div data-role="content">Prototype</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_7275664243" data-role="page">
<div data-role="content">End user</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_3380458500" data-role="page">
<div data-role="content">Assessment task 1</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_5562527013" data-role="page">
<div data-role="content">15% of Preliminary Course</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_3603081125" data-role="page">
<div data-role="content">Outcomes Assessed: P1.2, P2.2, P3.1, P4.1, P4.2, P4.3, P6.1</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1018143277" data-role="page">
<div data-role="content">Topics Examined:</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_2856833200" data-role="page">
<div data-role="content">Software Development Approaches
Defining the Problem
Planning the Solution
Representation of integers in decimal, binary and hex.
Data Types
Data Structures</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1754744767" data-role="page">
<div data-role="content">Example Questions</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1416467504" data-role="page">
<div data-role="content">What are some of the functions of an operating system</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_8366828167" data-role="page">
<div data-role="content">Scheduling and running tasks</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_4307151705" data-role="page">
<div data-role="content">Memory allocation to running tasks</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_6001235475" data-role="page">
<div data-role="content">Provide user interface</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_0402378623" data-role="page">
<div data-role="content">Provide interface between applications and peripherals and applications and filesystem</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_6176646582" data-role="page">
<div data-role="content">Name 3 common operating systems</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_3883587623" data-role="page">
<div data-role="content">Microsoft Windows 7</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1045166113" data-role="page">
<div data-role="content">Macintosh System X Snowleopard</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_6241454538" data-role="page">
<div data-role="content">Android</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_6710420387" data-role="page">
<div data-role="content">Linus Torvalds developed which operating system</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_4250062118" data-role="page">
<div data-role="content">Linux</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1552686276" data-role="page">
<div data-role="content">What is the process called that generates an executable image from source code.</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_3504578205" data-role="page">
<div data-role="content">Compilation</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_8048812732" data-role="page">
<div data-role="content">What are 2 advantages of distributing executable files?</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_3565232370" data-role="page">
<div data-role="content">Runs faster</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_0170782482" data-role="page">
<div data-role="content">Source code is not exposed</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_3123273661" data-role="page">
<div data-role="content">Traditionally, structured programming was the method used for software development. This is no longer the case. Why?</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_6885775460" data-role="page">
<div data-role="content">What are some of the major differences between the waterfall (structured) approach and the agile approach to software development?</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_4517437513" data-role="page">
<div data-role="content">Metalanguages</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1803151350" data-role="page">
<div data-role="content">http://hsc.csu.edu.au/sdd/core/cycle/3827/metalanguages.htm</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_0666531433" data-role="page">
<div data-role="content">Outcomes addressed:

H1.2 differentiates between various methods used to construct software solutions
H4.2 applies appropriate development methods to solve software problems</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1892343683" data-role="page">
<div data-role="content">Objectives - Students will develop...</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1792962314" data-role="page">
<div data-role="content">1. knowledge and understanding about how software solutions utilise and interact with other elements of computer systems</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1422630254" data-role="page">
<div data-role="content">Preliminary outcomes</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_875215626" data-role="page">
<div data-role="content">A student: 
P1.1 describes the functions of hardware and software 
P1.2 describes and uses appropriate data types 
P1.3 describes the interactions between the elements of a computer system</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_719325540" data-role="page">
<div data-role="content">HSC outcomes</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1914592007" data-role="page">
<div data-role="content">A student: 
H1.1 explains the interrelationship between hardware and software 
H1.2 differentiates between various methods used to construct software solutions
H1.3 describes how the major components of a computer system store and manipulate data</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1868390590" data-role="page">
<div data-role="content">2. knowledge and understanding of the historical developments that have led to current practices in software design and development, and of emerging trends and technologies in this field</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1717831734" data-role="page">
<div data-role="content">Preliminary outcomes</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_410681470" data-role="page">
<div data-role="content">P2.1 describes developments in the levels of programming languages 
P2.2 describes the effects of program language developments on current practices</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1739268665" data-role="page">
<div data-role="content">HSC outcomes</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1551806726" data-role="page">
<div data-role="content">H2.1 explains the implications of the development of different languages 
H2.2 explains the interrelationship between emerging technologies and software development</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1219772358" data-role="page">
<div data-role="content">3. knowledge and understanding of legal, social and ethical issues and their effect on software design and development</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_207857135" data-role="page">
<div data-role="content">Preliminary outcomes</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1901763154" data-role="page">
<div data-role="content">P3.1 identifies the issues relating to the use of software solutions</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_400237093" data-role="page">
<div data-role="content">HSC outcomes</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_772166332" data-role="page">
<div data-role="content">H3.1 identifies and evaluates legal, social and ethical issues in a number of contexts 
H3.2 constructs software solutions that address legal, social and ethical issues</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1904287706" data-role="page">
<div data-role="content">4. skills in designing and developing software solutions</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1406588714" data-role="page">
<div data-role="content">Preliminary outcomes</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1404789155" data-role="page">
<div data-role="content">P4.1 analyses a given problem in order to generate a computer-based solution 
P4.2 investigates a structured approach in the design and implementation of a software solution 
P4.3 uses a variety of development approaches to generate software solutions and distinguishes between these approaches</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_334054915" data-role="page">
<div data-role="content">HSC outcomes</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_350143506" data-role="page">
<div data-role="content">H4.1 identifies needs to which software solutions are appropriate 
H4.2 applies appropriate development methods to solve software problems 
H4.3 applies a modular approach to implement well structured software solutions and evaluates their effectiveness</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_712389443" data-role="page">
<div data-role="content">5. skills in management appropriate to the design and development of software solutions</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_888929917" data-role="page">
<div data-role="content">Preliminary outcomes</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_733624380" data-role="page">
<div data-role="content">P5.1 uses and justifies the need for appropriate project management techniques 
P5.2 uses and develops documentation to communicate software solutions to others</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_894705332" data-role="page">
<div data-role="content">HSC outcomes</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1044567351" data-role="page">
<div data-role="content">H5.1 applies project management techniques to maximise the productivity of the software development H5.2 creates and justifies the need for the various types of documentation required for a software solution 
H5.3 selects and applies appropriate software to facilitate the design and development of software solutions</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1132176234" data-role="page">
<div data-role="content">6. skills in teamwork and communication associated with the design and development of software solutions</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1622694931" data-role="page">
<div data-role="content">Preliminary outcomes</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_50754013" data-role="page">
<div data-role="content">P6.1 describes the skills involved in software development 
P6.2 communicates with appropriate personnel throughout the software development process 
P6.3 designs and constructs software solutions with appropriate interfaces</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_666845667" data-role="page">
<div data-role="content">HSC outcomes</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_785849069" data-role="page">
<div data-role="content">H6.1 assesses the skills required in the software development cycle 
H6.2 communicates the processes involved in a software solution to an inexperienced user 
H6.3 uses and describes a collaborative approach during the software development cycle 
H6.4 develops and evaluates effective user interfaces, in consultation with appropriate people</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_451944322" data-role="page">
<div data-role="content">Content</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_159516979" data-role="page">
<div data-role="content">Preliminary</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_399880308" data-role="page">
<div data-role="content">8.1 Concepts and Issues in the Design and Development of Software</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_924146275" data-role="page">
<div data-role="content">8.1.1 Social and ethical issues</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_667542308" data-role="page">
<div data-role="content">Evolution of software applications</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_569563902" data-role="page">
<div data-role="content">Students Learn About</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1885312924" data-role="page">
<div data-role="content">• significant applications and design features such as:
– Command line interface 
– GUI interface 
– search engines 
– VisiCalc 
– web browsers 
– presentation software 
– email 
– social networking applications</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_887152044" data-role="page">
<div data-role="content">Students Learn to</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_167714664" data-role="page">
<div data-role="content">• identify significant milestones in the evolution of software applications and design features</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1219915274" data-role="page">
<div data-role="content">Intellectual property</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1778274548" data-role="page">
<div data-role="content">Students Learn to</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_616814425" data-role="page">
<div data-role="content">• copyright 
• types of software licences 
• licence terminology 
• legal aspects 
• use of software covered by a licence agreement (see Course Specifications document) 
• events that have led to the need for software licence agreements, including: 
– ease of reproduction and copy 
– collaborative development history 
– the current open environment of the internet 
• sources of code and license conditions that apply, such as: 
– the internet 
– books and magazines</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_728903314" data-role="page">
<div data-role="content">Students Learn About</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1441018302" data-role="page">
<div data-role="content">• analyse the issues relating to intellectual property 
• appropriately acknowledge externally sourced code 
• use software in an ethically and legally correct manner</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_306113314" data-role="page">
<div data-role="content">Social context of software design</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1527404247" data-role="page">
<div data-role="content">Students Learn to</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1488034813" data-role="page">
<div data-role="content">• design and evaluate software interfaces in terms of inclusivity 
• identify ways in which privacy can be protected 
• identify the range of skills required to complete a minor software project</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1198260162" data-role="page">
<div data-role="content">Students Learn About</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_170938311" data-role="page">
<div data-role="content">Ergonomics 
• ergonomic issues regarding software design: 
– effectiveness of screen design 
– ease of use 
– appropriate messages to the user 
– consistency of the user interface 
Inclusivity 
• the need for software to not exclude individuals or groups based on characteristics such as: 
– cultural background 
– economic background 
– gender 
– disability 
Privacy 
• need to protect an individual’s data and identity 
Required skills in software design and development, including: 
• communication skills 
• ability to work in teams 
• creativity 
• design skills 
• technical skills 
• problem-solving skills 
• attention to detail</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_522309597" data-role="page">
<div data-role="content">8.1.2 Hardware and software</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1632791753" data-role="page">
<div data-role="content">Students Learn About</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_552881863" data-role="page">
<div data-role="content">Elements of a computer system 
• hardware 
• software 
• data 
• procedures 
• personnel</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_971041938" data-role="page">
<div data-role="content">Hardware 
• the function of hardware within a computer system, namely: 
– input 
– output 
– process 
– storage 
– control 
• how a variety of input devices, output devices, storage devices and CPU components achieve their purpose 
• the current trends and developments in computer hardware</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_926137918" data-role="page">
<div data-role="content">Software 
• operating systems and utilities (see Course Specifications document) 
• off-the-shelf applications packages and customdesigned software 
• generations of programming languages, namely: 
– machine code: 1st generation 
– assembly language: 2nd generation 
– higher-level languages (imperative/procedural): 3rd generation 
– declarative (non-procedural) languages: 4th generation 
• the need for translation 
– compilation
– interpretation
• functions of operating systems
– provide interface to hardware
– provide interface to user
– provide interface to software applications
– control the concurrent running of software applications
– manage system resources (see Course Specifications document)
• current trends in the development of software and operating systems</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1840321838" data-role="page">
<div data-role="content">The relationship between hardware and software 
• processing of software instructions by hardware – the fetch–execute cycle 
• the initiation and running of an application by the operating system 
– locate and load application 
– hand control to application 
– start fetch–execute cycle for the application 
• the existence of minimum hardware requirements to run some software</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1530070575" data-role="page">
<div data-role="content">Students Learn To</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_868084582" data-role="page">
<div data-role="content">• identify the elements of a computer system and their role in that system 
• describe the significance of and interaction between the elements comprising computer systems 
• describe how data is captured, stored, manipulated or displayed on a variety of hardware devices (see Course Specifications document) 
• competently use computer hardware, selecting appropriate hardware for specific tasks 
• identify the impact of using particular devices on the development and use of software 
• competently use a range of software 
• describe the development of the generations of programming languages 
• identify the effect of the generations of programming languages on software development practices 
• distinguish between methods of translation
• identify typical tasks performed by operating systems
• describe what happens during each of the steps of the fetch–execute cycle
• identify the role of specific hardware used during each step of the fetch–execute cycle</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1935913957" data-role="page">
<div data-role="content">8.1.3 Software development approaches</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1781023793" data-role="page">
<div data-role="content">Students Learn About</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1537046267" data-role="page">
<div data-role="content">Structured approach 
• stages in program development 
– defining and understanding the problem 
– planning and designing 
– implementing 
– testing and evaluating 
– maintaining 
• characteristics of the structured approach, including: 
– distinct formal stages
– long time periods 
– large-scale projects 
– large budgets 
– involvement of a development team consisting of: - analysts - designers - programmers - clients (users and management)</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1443870248" data-role="page">
<div data-role="content">Agile approach 
• speed of getting solution to market 
• interactive approach with selective refinement
• working version delivered after each iteration
• responds well to changing specifications 
• close collaboration between development team and client throughout the development process</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1710038798" data-role="page">
<div data-role="content">Prototyping 
• modeling of a proposed solution or part of a solution 
• progressive refinement of the model in response to feedback</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_592249849" data-role="page">
<div data-role="content">Rapid applications development approach (RAD) 
• characteristics of the rapid approach, including: 
– lack of formal stages 
– use of existing routines
– use of appropriate applications to develop the RAD solution
- drag and drop programming environments 
- common application packages such as spreadsheets, databases 
– communication between developer and client 
– short time period 
– small-scale projects 
– small budgets</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1687076515" data-role="page">
<div data-role="content">End user approach 
• characteristics of the end user approach, including: 
– end user as the developer and maintainer 
– typically uses RAD and/or prototyping 
– the developer is the client, therefore there are no communication issues 
– small budget and/or short time period for development</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_723507794" data-role="page">
<div data-role="content">Selecting an appropriate development approach 
• software solutions that have been developed using a single approach 
• software solutions that have been developed using a combination of approaches</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1394523186" data-role="page">
<div data-role="content">Students Learn To</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_583698558" data-role="page">
<div data-role="content">• identify each of these stages in practical programming exercises 
• design and develop a limited prototype as a proposed solution, or part of a solution, to a problem
• analyse the effectiveness of the prototyping approach in developing a software solution
• use an existing software package to develop a solution using a RAD approach
• discuss the advantages and disadvantages of end user developed software
• compare and contrast structured and agile approaches
• recognise reasons for the failure of solutions
• select appropriate software development approaches for specific purposes
• identify characteristics of projects that lend themselves to a specific development approach
• recognise that a single solution may involve a combination of approaches
• identify characteristics of projects that require a combination of approaches</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1838630731" data-role="page">
<div data-role="content">8.2 Introduction to Software Development</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_702305734" data-role="page">
<div data-role="content">8.2.1 Defining and understanding the problem, and planning and designing software solutions</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1275690422" data-role="page">
<div data-role="content">Students Learn About</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1370146655" data-role="page">
<div data-role="content">Understanding the problem 
• clarification of the specifications 
• performance requirements 
• identification of inputs and required outputs • determining the steps that, when carried out, will solve the problem 
• Input Process Output (IPO) diagrams</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_499699672" data-role="page">
<div data-role="content">Abstraction/refinement 
• the top-down approach to solution development 
– a system comprises all the programs in the suite 
– a program comprises all of the modules required to perform the required task 
– a module is a group of subroutines that together achieve a subtask 
– a subroutine is a set of statements that performs a single logical task</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1622889710" data-role="page">
<div data-role="content">Data types 
• data types used in solutions, including: 
– integer 
– string 
– floating point/real 
– boolean 
• integer representation in binary, decimal and hexadecimal 
• characters represented as numbers in binary, decimal and hexadecimal 
• limitations of particular data types 
• data structures, including: 
– one-dimensional array 
– record 
• use of records in sequential files</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1307468612" data-role="page">
<div data-role="content">Structured algorithms 
• control structures which form the basic building blocks of all algorithms: 
– sequence 
– selection (binary, multiway) 
– repetition (pre-test, post-test), including for … next loops 
– use of subroutines 
• methods for representing algorithms: 
– pseudocode 
– flowcharts incorporating standard control structures 
• software structure 
– use of a clear uncluttered mainline and subroutines 
– use of a modular approach 
– use of stubs to represent incomplete modules 
• use of standard algorithms, including: 
– load an array and print its contents 
– add the contents of an array of numbers 
• checking the algorithm for errors 
• benefits of using structured algorithms 
– ease of development 
– ease of understanding 
– ease of modification</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_70963772" data-role="page">
<div data-role="content">Students Learn To</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1034284749" data-role="page">
<div data-role="content">• determine the inputs and outputs required for a particular problem 
• produce an IPO diagram from a set of specifications 
• develop a systematic approach to the development of software solutions 
• document a proposed non-complex software solution 
– represent the flow of data through a system using a context diagram 
– represent a system using a data flow diagram (DFD) to show its components and the data transferred between them 
– represent a system using a structure chart to show the interrelationship between the component modules 
– represent a system using a systems flowchart to show its component modules, files and media 
• interpret and use an ASCII table 
• identify the maximum decimal value that can be stored in a given number of bits 
• recognise the impact of the use of an inappropriate data type 
• select the most appropriate data type for the solution to a particular problem and discuss the merit of the chosen type 
• create a data dictionary which defines the data appropriately
• identify control structures in an algorithm
• interpret and create algorithms represented in both pseudocode and flowcharts that use standard control structures
• detect logic errors in an algorithm by performing a desk check
• gather solutions from a number of sources and modify them to form an appropriate solution to a specified problem
• represent code from different sources as an algorithm to assist in understanding its purpose and to assess its relevance in a proposed solution</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_903619648" data-role="page">
<div data-role="content">8.2.2 Implementing software solutions</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_487467921" data-role="page">
<div data-role="content">Students Learn About</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_522979423" data-role="page">
<div data-role="content">Coding in an approved programming language 
• meta-languages, including: 
– EBNF 
– railroad diagrams 
• language syntax 
– specified through meta-languages in manuals and help documentation 
• the syntax used to represent the control structures, including: 
– sequence 
– selection (binary, multiway) 
– repetition (pre-test, post-test, for…next loops) 
– use of subroutines or procedures 
– combinations of these 
• the syntax used to define and use a range of data types and data structures, including: 
– integer 
– string 
– floating point/real 
– boolean 
– one-dimensional array 
– records</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1840072563" data-role="page">
<div data-role="content">Developing source code – converting algorithms into source code using syntactically correct statements</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_803211819" data-role="page">
<div data-role="content">Error detection and correction techniques
• types of coding errors, including:
– syntax errors
– runtime errors
– logic errors
• stubs
– used to check the flow of execution
– used to replace subroutines/modules during testing to check if that section of the code is the cause of an error
• flags
– used to check if a section of code has been executed
– can be used as part of the logic of a solution or as an error detection process
• debugging output statements
– additional print statements in the code for use in the debugging process
– used to identify which sections of the code have been executed
– used to interrogate variable contents at a particular point in the execution of a program</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_278279679" data-role="page">
<div data-role="content">Commonly executed sections of code
• reusable code
– standard logic, such as:
- a login process
- data validation
- conversion between date formats
– to replace multiple occurrences of the same code
• combining code from different sources
– copying and pasting into code
– calling modules or subroutines
• making the same data available to different modules
– global variables
– parameter passing
• use of functions and procedures</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1602993091" data-role="page">
<div data-role="content">User interface development
• the need for consultation with users and/ or managers
• use of storyboard
– shows the general design of each interface
– shows navigation between interfaces
• effective user interfaces, including:
– factors affecting readability
– use of white space
– effective prompts
– judicious use of colour and graphics
– grouping of information
– unambiguous and non-threatening error messages
– legibility of text, including:
- justification
- font type (serif vs sans serif)
- font size
- font style
- text colour
– navigation
– recognition of relevant social and ethical issues
– consistency
– appropriate language for the intended audience</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1091802763" data-role="page">
<div data-role="content">Documentation 
• types of documentation 
– documentation for developers 
– documentation for users 
• internal documentation 
– meaningful variable names (intrinsic) 
– readability of code
- comments
- white space
- indentation
• online help, such as:
– context sensitive help
– help files</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_523242510" data-role="page">
<div data-role="content">Students Learn To</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_30541267" data-role="page">
<div data-role="content">• verify the syntax of a command using metalanguage statements
• specify syntax using meta-language statements
• use meta-language statements to develop syntactically correct code
• generate appropriate source code by:
– using appropriate data types and data structures in solutions
– using a programming environment to generate and execute code
– coding an algorithm into the chosen programming language
• trace the output of a given code fragment and modify it appropriately
• systematically eliminate syntax errors so that a program can be executed
• run, correct and extend existing code
• test a program with boundary values to detect possible runtime errors
• detect and correct logic errors in program code by using a systematic error detection and correction process
• develop standard modules or subroutines for reuse
• create solutions to problems using existing code with minimal change or additions
• develop code that makes use of common modules or subroutines
• differentiate between the scope of local and global variables
• develop code that makes appropriate use of global and local variables
• develop code that calls common modules and passes parameters appropriately
• incorporate functions into modules or subroutines
• make use of procedures (see Course Specifications document)
• develop solutions that include appropriate user interfaces
• evaluate the effectiveness of interfaces used in commercially available software
• develop an appropriate storyboard for a specified problem
• design screens incorporating good design and ergonomic features
• incorporate current relevant interface elements into software solutions
• produce documentation for different audiences
• produce source code which is well documented and therefore easy to read, understand and maintain
• fully document a solution that has been developed in the classroom
• create a data dictionary to define the data (including variables, arrays and records) used in a developed solution
• use a range of application packages to develop the various types of documentation to fully document a solution
• interpret code and documentation prepared by others
• assess the effectiveness of online help available in software packages</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_847337814" data-role="page">
<div data-role="content">8.2.3 Testing and evaluating software solutions</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1136147458" data-role="page">
<div data-role="content">Students Learn About</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1204348062" data-role="page">
<div data-role="content">Testing the solution
• the selection of appropriate test data, including:
– data that test all the pathways through the algorithm
– data that test boundary conditions ‘at’, ‘above’ and ‘below’ values upon which decisions are based
– data where the required answer is known
– data which is outside the expected values
• the need for thorough test data
• testing both algorithms and coded solutions with test data such as:
– desk checking an algorithm
– stepping through a coded solution line by line
• peer checking
• structured walk through</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1612881782" data-role="page">
<div data-role="content">Evaluating the solution
• comparing different solutions to the same problem
– different interpretations of the design specifications
– the advantages and disadvantages of different approaches to a solution</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1955963931" data-role="page">
<div data-role="content">• checking the solution to see if it meets the original design specifications
• the importance and use of user feedback
• the importance of checking that social and ethical perspectives have been appropriately addressed</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_999691875" data-role="page">
<div data-role="content">Students Learn To</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1810805727" data-role="page">
<div data-role="content">• determine the expected result given test data
• compare the actual output from a piece of code with the expected output from test data to detect logic errors
• create a set of appropriate test data and use it to verify the logic in a solution
• perform a desk check by producing a table showing the changes to the content of variables as the algorithm or code is stepped through manually
• critically evaluate their work and that of their peers
• share good aspects of their solutions and the solutions of others</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1913761327" data-role="page">
<div data-role="content">8.2.4 Maintaining software solutions</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1724566690" data-role="page">
<div data-role="content">Students Learn About</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_617366803" data-role="page">
<div data-role="content">Reasons for maintaining code
• changing user requirements
• upgrading the user interface
• changes in the data to be processed
• introduction of new hardware or software
• changing organisational focus
• changes in government requirements
• poorly implemented code</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_205703694" data-role="page">
<div data-role="content">Features in source code that improve its maintainability, including: 
• use of variables instead of literal constants 
• use of meaningful variable names 
• explanatory comments in the code 
• use of standard control structures with appropriate indentation 
• appropriate use of white space to improve legibility of the source code 
• a clear and uncluttered mainline 
• one logical task per subroutine 
• meaningful names for subroutines and modules</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1534474934" data-role="page">
<div data-role="content">Understanding source code
• reading original documentation in order to understand code
– documentation for the user (including user manuals)
– documentation for developers
• reading original algorithms to identify:
– inputs
– the type and purpose of variables used
– processes
– outputs
• creating algorithms for source code when they are not available to aid in understanding
– identify the control structures that have been used
– understand how variables have been used</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1713612104" data-role="page">
<div data-role="content">Inclusion of code from other sources
• copyright issues
• compatibility of code</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1227049667" data-role="page">
<div data-role="content">Students Learn To</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_613549758" data-role="page">
<div data-role="content">• identify and describe features in code that allow it to be easily maintained
• create solutions that are easy to maintain
• convert a fragment of source code into its equivalent algorithm
• define the purpose of the code to be maintained
• modify code to meet changed requirements
• provide appropriate acknowledgement of the code of other programmers that has been incorporated as part of the maintenance process
• assess the compatibility of code to be included in the source code of an existing solution</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_754452628" data-role="page">
<div data-role="content">8.3 Developing Software Solutions</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_956175412" data-role="page">
<div data-role="content">Students Learn About</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_261568359" data-role="page">
<div data-role="content">Project management
• identifying tasks
• identifying required programs, modules and subroutines
• Gantt charts
• logbooks
– regular record of progress
– record of major milestones and stumbling blocks
• allocating resources
• regular backup with version numbers
• responding to difficulties
– reference to documentation such as manuals
– discussion with peers and experts
– reporting problems to management
• evaluating the solution
– throughout the process
– on completion</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_809044223" data-role="page">
<div data-role="content">Documenting software solutions
• IPO diagrams
• context diagrams
• data flow diagrams (DFDs)
• storyboards
• structure charts
• system flowcharts
• data dictionaries
• Gantt charts
• logbooks
• algorithms
• user documentation including manuals and online help</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1912468973" data-role="page">
<div data-role="content">Developing software solutions
• defining and understanding the problem
– preparation of initial documentation
• planning and designing
– identification of a suitable development approach
– design of appropriate algorithms
– identification and incorporation of appropriate existing algorithms
– determination of appropriate data structures
– identification of relevant subroutines
– design of test data and expected output
– desk check of algorithms
– identification of existing code that can be used
• implementing
– coding the solution in an appropriate language
– testing using test data
– documenting the solution, including:
- algorithms
- test data and expected output
- data dictionary
- user documentation
• testing and evaluating
– testing of the solution using test data
– evaluating the implemented solution
• maintaining
– modifying the solution to meet original or changed specifications</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1613762987" data-role="page">
<div data-role="content">Social and ethical issues related to software solutions
• intellectual property
• ergonomics issues
• inclusivity and accessibility
• privacy</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1834313419" data-role="page">
<div data-role="content">Students Learn To</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1734806035" data-role="page">
<div data-role="content">• use appropriate project management techniques
• create and use Gantt charts and logbooks
• devise, document and implement an appropriate backup strategy that incorporates relevant version numbers
• prepare suitable documentation to accompany software solutions
• use appropriate application packages in creating documentation to support a software solution
• create appropriate systems documentation for a variety of programming tasks
• apply the steps in the software development cycle when developing solutions
• produce a working solution from an algorithm derived from a set of specifications
• effectively test a solution
• update a solution incorporating new requirements
• address relevant social and ethical issues in their software solutions
</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_129232969" data-role="page">
<div data-role="content">HSC</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_216772034" data-role="page">
<div data-role="content">9.1 Development and Impact of Software Solutions</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_373770825" data-role="page">
<div data-role="content">9.1.1 Social and ethical issues</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_21596617" data-role="page">
<div data-role="content">Students Learn About</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_789199848" data-role="page">
<div data-role="content">The impact of software
• inappropriate data structures, for example the year 2000 problem
• computer malware such as viruses
• reliance on software
• social networking
• cyber safety
• huge amounts of information (which may be unsupported, unverifiable, misleading or incorrect) available through the internet</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1066890457" data-role="page">
<div data-role="content">Rights and responsibilities of software developers
• acknowledging the intellectual property of others
• recognition by others of the developer’s intellectual property
• producing quality software solutions
• appropriately responding to user-identified problems
• adhering to code of conduct
• neither generating nor transmitting malware
• addressing ergonomic issues in software design
• ensuring software addresses inclusivity issues
• ensuring individuals’ privacy is not compromised</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1517474003" data-role="page">
<div data-role="content">Software piracy and copyright
• concepts associated with piracy and copyright, including:
– intellectual property
– plagiarism
– copyright laws
– licensing issues
– licence conditions
– shareware
– public domain
– open source
– ownership versus licensing
– collaboratively developed software
– reverse engineering
– decompilation
• current and emerging technologies used to combat software piracy (see Course Specifications document)</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1572008374" data-role="page">
<div data-role="content">Use of networks
• by the developer when developing software
– access to resources
– ease of communication
– productivity
• by the user when using network based software
– response times
– interface design
– privacy and security issues</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1423111934" data-role="page">
<div data-role="content">The software market
• maintaining market position
• the effect of dominant developers of software
• the impact of new developers of software and new products</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1220851522" data-role="page">
<div data-role="content">Legal implications
• national and international legal action resulting from software development (see Course Specifications document)</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_102248198" data-role="page">
<div data-role="content">Students Learn To</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_979707227" data-role="page">
<div data-role="content">• recognise the effects of software solutions on society
• identify the impact of inappropriately developed software on users
• identify the effect of the inappropriate use of software on society and individuals
• apply a relevant code of conduct to their own software development
• interpret licence agreements and develop personal practices that reflect current laws
• identify the relationship between copyright laws and software license agreements
• acknowledge all sources in recognition of the intellectual contribution of authors
• identify a range of techniques designed to combat software piracy
• evaluate the usefulness of networks in the development environment
• identify the impact of dominant developers of software on software development
• discuss the reasons for, and consequences of, significant legal actions pertaining to the development of software</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1413668075" data-role="page">
<div data-role="content">9.1.2 Application of software development approaches</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_856729119" data-role="page">
<div data-role="content">Students Learn About</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1286722416" data-role="page">
<div data-role="content">Software development approaches
• approaches used in commercial systems, including:
– Structured approach
– Agile approach
– Prototyping
– RAD
– End user approach
– combinations of any of the above
• use of Computer Aided Software Engineering (CASE) tools and their application in large systems development, including:
– software version control
– test data generation
– production of documentation
– production of code
• methods of installation of new or updated systems
– direct cut over
– parallel
– phased
– pilot
• employment trends in software development, for example:
– outsourcing
– contract programmers
• trends in software development
– changing nature of the environment in which developers work while creating software solutions
– changing nature of applications (see Course Descriptions documents)</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1700566398" data-role="page">
<div data-role="content">Students Learn To</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1812830930" data-role="page">
<div data-role="content">• compare and determine the most appropriate software development approach for a given scenario
• communicate understanding of a commercial system studied using a case study approach by:
– identifying the approaches used
– discussing the appropriateness of the approaches used
– describing how the various personnel contribute to the overall development
– critically evaluating how social and ethical issues were addressed
– evaluating how effectively the new system met the needs of the user
• make informed comment on current trends in software development</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1977984122" data-role="page">
<div data-role="content">9.2 Software Development Cycle</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1406127268" data-role="page">
<div data-role="content">9.2.1 Defining and understanding the problem</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_469132975" data-role="page">
<div data-role="content">Students Learn About</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1675494720" data-role="page">
<div data-role="content">Defining the problem
• identifying the problem
– needs of the client
- functionality requirements
- compatibility issues
- performance issues
– boundaries of the problem</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1236888673" data-role="page">
<div data-role="content">Issues relevant to a proposed solution
• determining if an existing solution can be used
– social and ethical considerations
– consideration of existing software products
– customisation of existing software solutions
– cost effectiveness
– licensing considerations
• selecting an appropriate development approach if there is no appropriate existing solution</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_365705912" data-role="page">
<div data-role="content">Design specifications
• specifications of the proposed system
• developer’s perspective in consideration of:
– data types
– data structures
– algorithms
• user’s perspective
– interface design
– social and ethical issues
– relevance to the user’s environment and computer configuration</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_608113491" data-role="page">
<div data-role="content">System documentation
• representing a system using systems modeling tools, including:
– IPO diagrams
– context diagrams
– data flow diagrams (DFDs)
– storyboards
– structure charts
– system flowcharts
– data dictionaries
• algorithms used to document the logic in modules and subroutines
• test data and expected output</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_833716831" data-role="page">
<div data-role="content">Communication issues between client and developer
• the need to consult with the client
• the need to incorporate the client’s perspective
• the need for the developer to enable and consider feedback
• the need to involve and empower the client during the development process</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1911101404" data-role="page">
<div data-role="content">Quality assurance
• the need to explicitly define the criteria on which the quality of the product will be judged
• putting in place management processes to ensure that quality criteria will be met
• an ongoing process throughout development to ensure the quality criteria will be met</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_69589430" data-role="page">
<div data-role="content">Students Learn To</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_712047987" data-role="page">
<div data-role="content">• evaluate the extent to which a proposed system will meet user needs
• evaluate the effectiveness of using existing software
• identify the parts of the proposed system that require software to be designed and developed
• identify a relevant approach for a given problem
• develop and interpret design specifications from a user’s perspective
• recognise the difference between the user’s and developer’s perspectives and the communication issues that may arise
• differentiate between forms of systems documentation and the purposes for which each is used
• describe a system by interpreting its diagrammatic representation
• create a diagrammatic representation for a system using appropriate modeling tools
• effectively communicate with users regarding a proposed software solution
• identify a range of criteria on which the quality of the product will be judged
• identify relevant processes for a given criterion that will result in a quality product</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1659814400" data-role="page">
<div data-role="content">9.2.2 Planning and designing software solutions</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_345999032" data-role="page">
<div data-role="content">Students Learn About</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1136075745" data-role="page">
<div data-role="content">Standard algorithms
• standard logic used in software solutions, namely:
– finding maximum and minimum values in arrays
– processing strings (extracting, inserting, deleting)
– generating a set of unique random numbers
– processing of sequential files, including:
- sentinel value
- priming read
- open for input, output or append
- close
- appending records
– processing of relative files, including:
- open for relative access
- defining a key field for a relative file
- retrieving, writing and updating a record in a relative file
– linear search
– binary search
– bubble sort
– insertion sort
– selection sort (see Course Specifications document)</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1969074360" data-role="page">
<div data-role="content">Custom-designed logic used in software solutions
• requirements to generate these include:
– identification of inputs, processes and outputs
– representation as an algorithm
– testing of the logic in the algorithm
– identification and definition of required data structures
– use of data structures, including multidimensional arrays, arrays of records, files (sequential and relative) (see Course Specifications document)
• customised off-the-shelf packages
– identifying an appropriate package
– identifying the changes that need to be made
– identifying how the changes are to be made</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_667225384" data-role="page">
<div data-role="content">Standard modules (library routines) used in software solutions
• reasons for the development and use of standard modules
• requirements for generating a module or subroutine for re-use, including:
– identification of appropriate modules or subroutine
– appropriate testing using drivers
– thorough documentation of the routine:
- author
- date
- purpose
- order and nature of parameters to be passed
• issues associated with reusable modules or subroutines, including:
– identifying appropriate modules or subroutines
– considering local and global variables
– appropriately using parameters (arguments)</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1208332303" data-role="page">
<div data-role="content">Documentation of the overall software solution
• tools for representing a complex software solution, including:
– algorithms
– refined system modeling tools, including:
- IPO diagrams
- context diagrams
- data flow diagrams (DFDs)
- storyboards
- structure charts
- system flowcharts
- data dictionaries</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1619133309" data-role="page">
<div data-role="content">Interface design in software solutions
• the design of individual screens in consultation with the client, including:
– consideration of the intended audience
– identification of screen size
– identification of data fields and screen elements required and their appropriate on-screen placement
– online help
– consistency in approach
– recognition of relevant social and ethical issues
– current common practice in interface design
(see Course Specifications document)</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1260146620" data-role="page">
<div data-role="content">Factors to be considered when selecting the programming language to be used
• sequential or event-driven software
– driven by the programmer or user
• features required, and features available in the language
• commands within the language to interface with the required hardware
• ability to run under different operating systems</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_976445867" data-role="page">
<div data-role="content">Factors to be considered when selecting the technology to be used
• performance requirements
• benchmarking</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_202244107" data-role="page">
<div data-role="content">Students Learn To</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1023990741" data-role="page">
<div data-role="content">• recognise the logic in a standard approach, such as a sort or search
• apply standard approaches as part of the solution to complex problems
• read, interpret and modify algorithms developed by others
• document the logic required to solve problems, including:
– nesting of control structures
– record structure
– the use of files (sequential and relative)
– random number generators
– arrays of records
– multidimensional arrays
• develop a suitable set of test data
• desk check algorithms and source code that include complex logic
• select an appropriate data structure to solve a given problem
• develop and appropriately document a module for use by others
• correctly incorporate a standard module into a more complex solution, passing parameters effectively
• represent a software solution in diagrammatic form
• interpret and modify existing system modeling diagrams
• select and use appropriate software to assist in the documentation of a software solution
• recognise the relevance of CASE tools in the planning and design of a software solution
• design and evaluate effective interfaces for software solutions
• use a RAD environment to produce user interfaces
• recognise that the choice of programming language to be used depends on the problem to be solved
• interpret a benchmark report to select the most suitable technology for a specified task
• produce a benchmark report for a simple iterative process running under two different environments or conditions</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_115097323" data-role="page">
<div data-role="content">9.2.3 Implementation of software solution</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1228013125" data-role="page">
<div data-role="content">Students Learn About</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1791931184" data-role="page">
<div data-role="content">Implementation of the design using an appropriate language
• the different programming languages and the appropriateness of their use in solving different types of problems
• construction of syntactically correct code that implements the logic described in the algorithm</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_705436257" data-role="page">
<div data-role="content">Language syntax required for software solutions
• use of EBNF and railroad diagrams to describe the syntax of statements in the selected language</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_626622080" data-role="page">
<div data-role="content">The need for translational to machine code from source code
• translation methods in software solutions including:
– compilation
– interpretation
• advantages and disadvantages of each method
• steps in the translation process
– lexical analysis including token generation
– syntactical analysis including parsing
– code generation</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_659570919" data-role="page">
<div data-role="content">The role of machine code in the execution of a program
• machine code and CPU operation
– instruction format
– use of registers and accumulators
– the fetch–execute cycle
– use of a program counter and instruction register
• execution of called routines
• linking, including use of DLLs</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_684286016" data-role="page">
<div data-role="content">Techniques used in developing well-written code
• the use of good programming practice, including:
– a clear and uncluttered mainline
– one logical task per subroutine
– use of stubs
– appropriate use of control structures and data structures
– writing for subsequent maintenance
– version control
– regular backup
– recognition of relevant social and ethical issues
• the process of detecting and correcting errors, including:
– types of error
- syntax errors
- logic errors
- runtime errors, including:
- arithmetic overflow
- division by zero
- accessing inappropriate memory locations
– methods of error detection and correction
- use of flags
- methodical approach to the isolation of logic errors
- use of debugging output statements
- peer checking
- desk checking
- structured walkthrough
- comparison of actual with expected output
• the use of software debugging tools, including:
– use of breakpoints
– resetting variable contents
– program traces
– single line stepping</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_363333438" data-role="page">
<div data-role="content">Documentation of a software solution
• forms of documentation, including:
– log book
– user documentation, including:
- user manual
- reference manual
- installation guide
- tutorial
- online help
– technical documentation, including:
- systems documentation
- algorithms
- source code
• use of application software including CASE tools to assist in the documentation process
• recognition of relevant social and ethical issues</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_300755192" data-role="page">
<div data-role="content">Hardware environment to enable implementation of the software solution
• hardware requirements
– minimum configuration
– possible additional hardware
– appropriate device drivers or extensions</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1283399302" data-role="page">
<div data-role="content">Emerging technologies
• the effect of emerging hardware and software technologies on the development process (see Course Specifications document)</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1071914858" data-role="page">
<div data-role="content">Students Learn To</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1153156819" data-role="page">
<div data-role="content">• identify an appropriate language to solve a particular problem
• recognise the appropriateness of either a sequential or event-driven approach to solve a particular problem
• develop syntactically correct code to solve a problem in a given language
• interpret metalanguage definitions for commands in a selected language
• produce syntactically correct statements using the metalanguage definitions
• produce a generic metalanguage definition for a set of syntactically correct statements that use the same command
• implement a solution from a complex algorithm using syntactically correct statements
• explain the use of tokens and the role of the parsing process during the translation of source code to machine code
• recognise that machine code is the only code able to be executed by a computer
• identify the most appropriate translation method for a given situation
• use the features of both a compiler and an interpreter in the implementation of a software solution
• recognise, interpret and write machine code instructions for a problem fragment
• employ good programming practice when developing code
• justify the use of a clear modular structure with separate routines to ease the design and debugging process
• differentiate between types of errors 
• recognise the cause of a specific error and determine how to correct it
• effectively use a variety of appropriate error correction techniques to locate the cause of a logic error and then correct it
• produce user documentation (incorporating screen dumps) that includes:
– a user manual
– a tutorial
– online help
• differentiate between types of user documentation
• identify the personnel who would be likely to use the different types of documentation
• produce technical documentation for an implemented software solution
• recognise the need for additional hardware 
• identify potential compatibility issues for a newly developed software solution
• recognise the implications of emerging technologies for the developer in terms of the code written to make use of these technologies
• recognise the implications of emerging technologies for the code development process</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1470933723" data-role="page">
<div data-role="content">9.2.4 Testing and evaluating of software solutions</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1777493781" data-role="page">
<div data-role="content">Students Learn About</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1958012466" data-role="page">
<div data-role="content">Testing the software solution
• comparison of the solution with the design specifications
• generating relevant test data for complex solutions
• comparison of actual with expected output
• levels of testing
– module
- test that each module and subroutine functions correctly
- use of drivers
– program
- test that the overall program (including incorporated modules and subroutines) functions correctly
– system
- test that the overall system (including all programs in the suite) functions correctly, including the interfaces between programs
- acceptance testing
• the use of live test data to ensure that the testing environment accurately reflects the expected environment in which the new system will operate
– large file sizes
– mix of transaction types
– response times
– volume of data (load testing)
– effect of the new system on the existing systems in the environment into which it will be installed</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_873276184" data-role="page">
<div data-role="content">Reporting on the testing process
• documentation of the test data and output produced (see Course Specifications document)
– use of CASE tools
• communication with those for whom the solution has been developed, including:
– test results
– comparison with the original design specifications</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_606242364" data-role="page">
<div data-role="content">Evaluating the software solution
• verifying the requirements have been met appropriately
• quality assurance</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1632071141" data-role="page">
<div data-role="content">Post implementation review
• facilitation of open discussion and evaluation with the client
• client sign off process</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1037997324" data-role="page">
<div data-role="content">Students Learn To</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1011561242" data-role="page">
<div data-role="content">• differentiate between systems and program test data
• test their solution with the test data created at the design stage, comparing actual with expected output
• use drivers and/or stubs to test specific modules and subroutines before the rest of the code is developed
• recognise the importance of module testing before the module or subroutine is incorporated into the larger solution
• recognise that while an individual program or module may have been successfully tested, when it is incorporated into a larger system, problems may become apparent
• demonstrate the features of a new system to the client
• assess the new software solution to ensure that it meets the specified quality assurance criteria
• assess the performance of the new software solution against the criteria specified by the benchmark</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1346826705" data-role="page">
<div data-role="content">9.2.5 Maintaining software solutions</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_641238143" data-role="page">
<div data-role="content">Students Learn About</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1491687252" data-role="page">
<div data-role="content">Modifying code to meet changed requirements
• identifying reasons for change in source code
• locating of sections to be altered
• determining changes to be made
• implementing and testing solution</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1915481455" data-role="page">
<div data-role="content">Documenting changes
• including relevant comments in the source code to highlight the modification
• updating associated hard copy documentation and online help
• using CASE tools to monitor changes and versions (see Course Specifications document)</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_384385979" data-role="page">
<div data-role="content">Students Learn To</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1369942727" data-role="page">
<div data-role="content">• read and interpret source code created by other developers
• design, implement and test modifications
• recognise the cyclical approach to maintenance
• document modifications with dates and reasons for change</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1720853411" data-role="page">
<div data-role="content">9.3 Developing a Solution Package</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1011081817" data-role="page">
<div data-role="content">Students Learn About</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1386834074" data-role="page">
<div data-role="content">Designing and developing a software solution to a complex problem
• defining and understanding the problem
– identification of the problem
– generation of ideas 
– communication with others involved in the proposed system
– draft interface design
– representing the system using diagrams
– selection of appropriate data structures
– applying project management techniques
– consideration of all social and ethical issues
• planning and designing
– algorithm design
– refined systems modeling, such as:
- IPO diagrams
- context diagrams
- data flow diagrams (DFDs)
- storyboards
- structure charts
- system flowcharts
- data dictionaries
– additional resources
- Gantt charts
- logbooks
- algorithms
- prototypes
– selecting software environment
– identifying appropriate hardware
– selecting appropriate data structures
– defining files
- purpose
- contents
- organisation
– defining records
– defining required validation processes
– identifying relevant standard or common modules or subroutines
– using software to document design
– identifying appropriate test data
– enabling and incorporating feedback from users at regular intervals
– considering all social and ethical issues
– communicating with others involved in the proposed system
– applying project management techniques
• implementing
– converting the solution into code
– systematic removal of errors
– refining the data dictionary
– including standard or common modules or subroutines
– using software to refine documentation
– creating online help
– reporting on the status of the system at regular intervals
– applying project management techniques 
• testing and evaluating
– completing thorough program and system testing
– completing all user documentation for the project
• maintaining
– modifying the project to ensure:
- an improved, more elegant solution 
- all needs have been met
- the software solution operates under changed environments or requirements
– updating the software specifications and documentation to reflect the changes
Whole project issues
• project management techniques
• social and ethical issues
• feedback from users at regular intervals</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1920536819" data-role="page">
<div data-role="content">Students Learn To</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_606691229" data-role="page">
<div data-role="content">• define the problem and investigate alternative approaches to a software solution
• evaluate the ideas for practical implementation
• select an appropriate solution
• produce an initial Gantt chart
• use a logbook to document the progress of their project (see Course Specifications document)
• document the software solution
• generate a fully documented design for their project after communication with other potential users
• use and modify a Gantt chart as appropriate
• implement a fully tested and documented software solution in a methodical manner
• use project management techniques to ensure that the software solution is implemented in an appropriate time frame
• ensure that relevant ethical and social issues are addressed appropriately
• evaluate the project in relation to the original understanding of the problem
• review and evaluate the quality of the solution making the necessary changes
• manage the project effectively
• communicate effectively with potential users</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_91395863" data-role="page">
<div data-role="content">9.4 Options</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1914929841" data-role="page">
<div data-role="content">9.4.1 Option 1 Programming Paradigms</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_327846698" data-role="page">
<div data-role="content">Students Learn About</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_588848277" data-role="page">
<div data-role="content">Development of the different paradigms
• limitations of the imperative paradigm
– difficulty with solving certain types of problems
– the need to specify code for every individual process
– difficulty of coding for variability
• emerging technologies
• simplifying the development and testing of some larger software projects
• strengths of different paradigms</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_452822265" data-role="page">
<div data-role="content">Logic paradigm
• concepts
– variables
– rules
– facts
– heuristics
– goals
– inference engine
– backward/forward chaining
• language syntax
– variables
– rules
– facts
• appropriate use, such as:
– pattern matching
– AI
– expert systems</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1499605703" data-role="page">
<div data-role="content">Object oriented paradigm
• concepts
– classes
– objects
– attributes
– methods/operations
– variables and control structures
– abstraction
– instantiation
– inheritance
– polymorphism
– encapsulation
• language syntax
– classes
– objects
– attributes
– methods/operations
– variables and control structures
• appropriate use, such as
– computer games
– web-based database applications</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1887024513" data-role="page">
<div data-role="content">Issues with the selection of an appropriate paradigm
• nature of the problem
• available resources
• efficiency of solution once coded
• programmer productivity
– learning curve (training required)
– use of reusable modules
– speed of code generation
– approach to testing</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_357884684" data-role="page">
<div data-role="content">Students Learn To</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_282726487" data-role="page">
<div data-role="content">• identify the needs that led to the development of different paradigms
• recognise the issues associated with using an imperative approach to solve some problems such as Artificial Intelligence (AI) and computer gaming
• recognise representative fragments of code written using the logic paradigm (see Course Specifications document)
• recognise the use of the logic paradigm concepts in code
• interpret a fragment of code written using the logic paradigm, and identify and correct logic errors
• modify fragments of code written using the logic paradigm to incorporate changed requirements
• code and test appropriate solutions in a language using the logic paradigm
• assess the appropriateness of a software solution written using the logic paradigm against a solution written using an imperative approach
• recognise representative fragments of code written using the object oriented paradigm (see Course Specifications document)
• recognise the use of the object oriented concepts in code
• interpret a fragment of code written using the object oriented paradigm, and identify and correct logic errors
• modify fragments of code written using the object oriented paradigm to incorporate changed requirements
• code and test appropriate solutions in a language using the object oriented paradigm
• assess the appropriateness of a software solution written using the object oriented paradigm against a solution written using the imperative approach
• describe the strengths of the imperative, logic and object oriented paradigms
• identify an appropriate paradigm relevant for a given situation
• evaluate the effectiveness of using a particular paradigm to solve a simple problem</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_515663952" data-role="page">
<div data-role="content">9.4.2 Option 2 The interrelationship between software and hardware</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1952991947" data-role="page">
<div data-role="content">Students Learn About</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1526634497" data-role="page">
<div data-role="content">Representation of data within the computer
• character representation, namely:
– ASCII
– Unicode (see Course Specifications document)
• representation of data using different number systems
– binary
– hexadecimal
– decimal
• integer representation, including:
– sign and modulus
– 1’s complement
– 2’s complement
• floating point/real representation
– very large positive and negative values
– very small positive and negative values
– integer and non-integer values
– limitations
• binary arithmetic, including:
– addition
– subtraction using 2’s complement representation
– multiplication (shift and add)
– division (shift and subtract)
</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1672631521" data-role="page">
<div data-role="content">Electronic circuits to perform standard software operations
• logic gates, including:
– AND, OR, NOT, NAND,
NOR, XOR
• truth tables
• Boolean algebra
– describing a circuit
– simplifying an existing circuit
• circuit design steps
– identify inputs and outputs
– identify required components
– check solution with a truth table
– evaluate the circuit design
• specialty circuits, including:
– half adder
– full adder
– flip-flops</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_533618425" data-role="page">
<div data-role="content">Programming of hardware devices
• the data stream
– format of the data stream
- header information
- data block
- trailer information
– use of control characters
– use of hardware specifications to describe the expected format of the data stream
• processing an input data stream from sensors and other devices
– the structure of the data stream
- the need to recognise and strip control characters
- the need to identify the data characters
– interpreting the data stream (see Course Specifications document)
• generating output to an appropriate device
– determining the purpose of the output
– the structure of the data stream
- required header information
- the need for control characters
- specification of data characters
- required trailer information (see Course Specifications document)
• issues with interpreting data streams</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_322367929" data-role="page">
<div data-role="content">Students Learn To</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_247983551" data-role="page">
<div data-role="content">• effectively use an ASCII table to convert a character to its equivalent ASCII value and vice versa
• recognise the relationship between upper and lower case letters and digits, and their ASCII representation
• use the Unicode table which represents a larger character set than is available with ASCII
• convert a binary or hexadecimal representation to its equivalent character from the ASCII or Unicode table
• represent a string of binary digits as its hexadecimal equivalent and vice versa 
• convert integers between binary, decimal and hexadecimal representations
• convert between decimal fractions and the equivalent IEEE754 single precision floating point representation
• recognise implications of the limitations of particular data representations
• perform arithmetic operations in binary
• generate truth tables for a given circuit
• describe the function of a circuit from its truth table
• design a circuit to solve a given problem
• convert between the Boolean representation of a circuit and its circuit diagram
• build and test both user-designed and specialty circuits using integrated circuits or simulation software
• use a cyclical approach when designing circuits
• modify an existing circuit design to reflect changed requirements
• describe the function of specialty circuits
• analyse a specialty circuit in order to determine its output
• explain how a flip-flop can be used in the storage and shifting of a bit in memory
• interpret a data stream for a device for which specifications are provided
• modify a stream of data to meet changed requirements, given the hardware specifications
• generate a data stream to specify particular operations for a hardware device, for which specifications are provided such as a printer, to specify line feed, form feed, font and style change, and line spacing
• develop an algorithm to identify and extract data and/or control characters in order to interpret a data stream sent from the hardware
• develop an algorithm to generate a data stream to provide relevant instructions to the hardware
• recognise that a string of binary digits can have many different meanings
• interpret a string of binary digits, given a number of different possible specifications</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
<div id="ID_1525327319" data-role="page">
<div data-role="content">10 Course Requirements 
The Software Design and Development Stage 6 Syllabus includes a Preliminary course of 120 hours (indicative time) and an HSC course of 120 hours (indicative time). 
There is no prerequisite study for the Preliminary course. 
Completion of the Preliminary course is a prerequisite for the HSC course. 
It is a mandatory requirement that students spend a minimum of 20% of Preliminary course time and 25% of HSC course time on practical activities using the computer.</div>
<div data-role="footer">
<h4>Footer of #main page</h4>
</div>
</div>
</body>
</html>